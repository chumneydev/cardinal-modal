// Based on Scotch.io tutorial by Ken Wheeler 2014


// Immediately is invoked expression to wrap code
(function() {
    var privateVar = "You can't access this in the console";

    
    // our constructor
    this.Modal = function() {

        // global element reference
        this.closeButton = null;
        this.modal = null;
        this.overlay = null;


        // option defaults
        var defaults = {
            className: 'modal',
            closeButton: true,
            content: '',
            maxWidth: 1200,
            minWidth: 280,
            overlay: true
        };

        // create options be extending defaults with passed in arguments
        if (arguments[0] && typeof arguments[0] === 'object') {
            this.options = extendDefaults(defaults, arguments[0]);
        }
    };
    // end constructor 






    // Public Methods

    Modal.prototype.close = function() {
        // store value of this
        var _ = this;

        // remove open class
        this.modal.className = this.modal.className.replace(' ca-modal-open', '');
        this.overlay.className = this.overlay.className.replace(' ca-modal-open', '')


        // listen for css transition event and remove from the DOM
        this.modal.addEventListener(this.transitionEnd, function() {
            _.modal.parentNode.removeChild(_.modal);
        });
        this.overlay.addEventListener(this.transitionEnd, function() {
            if(_.overlay.parentNode) _.overlay.parentNode.removeChild(_.overlay);
        });




    }



    Modal.prototype.open = function() {

        // build modal
        buildOut.call(this);

        // init event listeners
        initializeEvents.call(this);

        window.getComputedStyle(this.modal).height;


        this.modal.className = this.modal.className +
        (this.modal.offsetHeight > window.innerHeight ?
            'ca-modal-open ca-modal-top' : 'ca-modal-open');
        this.overlay.className = this.overlay.className + 'ca-modal-open'


    }

    function buildOut() {
        var content, contentHolder, docFrag;

        /*
         * If content is HTML string, append the html string.
         * If content is a domNode, append its content.
         */

         if (typeof this.options.content === 'string') {
             content = this.options.content;
         } else {
             content = this.options.content.innerHTML;
         }

         // create documentfragment to build with
         docFrag = document.createDocumentFragment();

         // create modal div
         this.modal = document.createElement('div');
         this.modal.className = 'ca-modal' + this.options.className;
         this.modal.style.minWidth = this.options.minWidth + 'px';
         this.modal.style.maxWidth = this.options.maxWidth + 'px';


         // if closeButton is true, add one
         if (this.options.closeButton === true) {
             this.closeButton = document.createElement('button');
             this.closeButton.className = 'ca-modal-close modal-close';
             this.closeButton.innerHTML = 'x';
             this.modal.appendChild(this.closeButton);
         }


        // if overlay is true, add one
        if (this.options.overlay === true) {
            this.overlay = document.createElement('div');
            this.overlay.className = 'ca-modal-overlay' + this.options.className;
            docFrag.appendChild(this.overlay);
        }

        // create and append content to modal
        contentHolder = document.createElement('div');
        contentHolder.className = 'ca-modal-content';
        contentHolder.innerHTML = content;
        this.modal.appendChild(contentHolder);

        // append modal to document fragment
        docFrag.appendChild(this.modal);

        // append documentfragment to body
        document.body.appendChild(docFrag);

    };

    function initializeEvents() {
        if (this.closeButton) {
            this.closeButton.addEventListener('click', this.close.bind(this));
        }

        if (this.overlay) {
            this.closeButton.addEventListener('click', this.close.bind(this));
        }
    };



    // Private Methods

    // method to extend defaults with user options
    function extendDefaults(source, properties) {
        var property;
        for (property in properties) {
            if (properties.hasOwnProperty(property)) {
                source[property] = properties[property];
            }
        }
        return property;
    }


// Utility method to determine which transistionend event is supported
function transitionSelect() {
    var el = document.createElement("div");
    if (el.style.WebkitTransition) return "webkitTransitionEnd";
    if (el.style.OTransition) return "oTransitionEnd";
    return 'transitionend';
}

this.Modal = function () {
    // Determine proper prefix
    this.transitionEnd = transitionSelect();
}



}());

console.log('hehehehehe');